/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Controller;
import Model.Conexion;
import Model.ReportPetByBreed;
import Model.ReportPetByGender;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
* @author lenovo
 */
public class IntPets extends javax.swing.JDialog {

    Conexion con = new Conexion();
    Connection cn;
    Statement st;
    ResultSet rs;
    DefaultTableModel modelo;
    private final Controller controller;

    /**
     * Creates new form IntPets
     */
    public IntPets(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        controller = new Controller(this);
        show_pets();
        RefreshReportPetByGender();
        RefreshReportPetByBreed();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_petName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cb_breed = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jrb_hembra = new javax.swing.JRadioButton();
        jrb_macho = new javax.swing.JRadioButton();
        btn_addPet = new javax.swing.JButton();
        btn_editPet = new javax.swing.JButton();
        btn_deletePet = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_petId = new javax.swing.JTextField();
        cb_petOwner = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cb_petType = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtb_pets = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jpanel_graph_left = new javax.swing.JPanel();
        jpanel_graph_right = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setText("Nombre");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setText("Raza");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel3.setText("Dueño");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setText("REGISTRO DE MASCOTAS");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel6.setText("Género");

        buttonGroup1.add(jrb_hembra);
        jrb_hembra.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jrb_hembra.setText("Hembra");

        buttonGroup1.add(jrb_macho);
        jrb_macho.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jrb_macho.setText("Macho");

        btn_addPet.setText("Agregar mascota");
        btn_addPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addPetActionPerformed(evt);
            }
        });

        btn_editPet.setText("Editar información");
        btn_editPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editPetActionPerformed(evt);
            }
        });

        btn_deletePet.setText("Eliminar mascota");
        btn_deletePet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deletePetActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel8.setText("ID");

        txt_petId.setEditable(false);
        txt_petId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_petIdActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel4.setText("Tipo");

        cb_petType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Perro", "Gato" }));
        cb_petType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_petTypeActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Public/pets_1_133_133.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_addPet)
                        .addGap(18, 18, 18)
                        .addComponent(btn_editPet))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(221, 221, 221)
                                .addComponent(jLabel5))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jrb_hembra)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jrb_macho))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel8))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txt_petId, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cb_petOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(49, 49, 49))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_petName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cb_breed, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cb_petType, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_deletePet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cb_petType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_petName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_breed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cb_petOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_petId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jrb_hembra)
                    .addComponent(jrb_macho))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_addPet)
                    .addComponent(btn_editPet)
                    .addComponent(btn_deletePet))
                .addContainerGap())
        );

        jtb_pets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Raza", "Dueño", "Género"
            }
        ));
        jtb_pets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtb_petsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtb_pets);
        if (jtb_pets.getColumnModel().getColumnCount() > 0) {
            jtb_pets.getColumnModel().getColumn(0).setMaxWidth(60);
        }

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel7.setText("HISTORIAL DE MASCOTAS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpanel_graph_leftLayout = new javax.swing.GroupLayout(jpanel_graph_left);
        jpanel_graph_left.setLayout(jpanel_graph_leftLayout);
        jpanel_graph_leftLayout.setHorizontalGroup(
            jpanel_graph_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );
        jpanel_graph_leftLayout.setVerticalGroup(
            jpanel_graph_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpanel_graph_rightLayout = new javax.swing.GroupLayout(jpanel_graph_right);
        jpanel_graph_right.setLayout(jpanel_graph_rightLayout);
        jpanel_graph_rightLayout.setHorizontalGroup(
            jpanel_graph_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );
        jpanel_graph_rightLayout.setVerticalGroup(
            jpanel_graph_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jpanel_graph_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpanel_graph_right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpanel_graph_right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpanel_graph_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jpanel_graph_right.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addPetActionPerformed
        // TODO add your handling code here:
        add_pet();
    }//GEN-LAST:event_btn_addPetActionPerformed

    private void btn_editPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editPetActionPerformed
        // TODO add your handling code here:
        edit_pet();
    }//GEN-LAST:event_btn_editPetActionPerformed

    private void btn_deletePetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deletePetActionPerformed
        // TODO add your handling code here:
        delete_pet();
    }//GEN-LAST:event_btn_deletePetActionPerformed

    private void jtb_petsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtb_petsMouseClicked
        // TODO add your handling code here:
        int row = jtb_pets.getSelectedRow();
        System.out.println(row);
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una mascota");
        } else {
            int id = Integer.parseInt((String) jtb_pets.getValueAt(row, 0).toString());
            String name = (String) jtb_pets.getValueAt(row, 1);
            String breed = (String) jtb_pets.getValueAt(row, 2);
            String petOwner = (String) jtb_pets.getValueAt(row, 3);
            String gender = (String) jtb_pets.getValueAt(row, 4);
            System.out.println(id + " - " + name + " - " + breed + " - " + petOwner + " - " + gender);
            txt_petId.setText("" + id);
            txt_petName.setText(name);

            cb_breed.setSelectedItem(breed);
            int totalBreed = cb_breed.getItemCount();

            for (int i = 0; i < totalBreed; i++) {
                System.out.println(cb_breed.getItemAt(i).toString());
                if (cb_breed.getItemAt(i).toString().equals(breed)) {
                    System.out.println("Ingreso al if1");
                    cb_breed.setSelectedIndex(i);
                }

            }

            cb_petOwner.setSelectedItem(petOwner);
            int totalOwner = cb_petOwner.getItemCount();

            for (int i = 0; i < totalOwner; i++) {
                System.out.println(cb_petOwner.getItemAt(i).toString());
                if (cb_petOwner.getItemAt(i).toString().equals(petOwner)) {
                    System.out.println("Ingreso al if2");
                    cb_petOwner.setSelectedIndex(i);
                }

            }

            if (gender.equals("Hembra")) {
                jrb_hembra.setSelected(true);
            }
            if (gender.equals("Macho")) {
                jrb_macho.setSelected(true);
            }

        }
    }//GEN-LAST:event_jtb_petsMouseClicked

    private void txt_petIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_petIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_petIdActionPerformed

    private void cb_petTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_petTypeActionPerformed
        // TODO add your handling code here:
        /* Method implemented to filter data when the cb action change */
        show_pets();
    }//GEN-LAST:event_cb_petTypeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IntPets dialog = new IntPets(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

//    void show_pets() {
//        String sql = "SELECT tp.id id_pet, tp.name pet_name, tb.name pet_breed, tp.gender pet_gender, tpo.owner pet_owner, tb.pet_type FROM tb_pet tp INNER JOIN tb_pet_owners tpo ON tp.id_pet_owner = tpo.id INNER JOIN tb_breeds tb ON tp.id_pet_breed = tb.id ORDER BY tp.id";
//        try {
//            cn = con.getConnection();
//            st = cn.createStatement();
//            rs = st.executeQuery(sql);
//            //Los datos que devuelve la consulta se muestran en la tabla
//            Object[] pets = new Object[5];
//            modelo = (DefaultTableModel) jtb_pets.getModel();
//            while (modelo.getRowCount() > 0) {
//                modelo.removeRow(0);
//            }
//            while (rs.next()) {
//                pets[0] = rs.getInt("id_pet");
//                pets[1] = rs.getString("pet_name");
//                pets[2] = rs.getString("pet_breed");
//                pets[3] = rs.getString("pet_owner");
//                pets[4] = rs.getString("pet_gender");
//                modelo.addRow(pets);
//                System.out.println(rs.getInt("id_pet"));
//            }
//            jtb_pets.setModel(modelo);
//        } catch (SQLException e) {
//
//        }
//    }
//
    void show_pets() {

        String filter_pet = cb_petType.getSelectedItem().toString();
        String sql = "";
        if (filter_pet.equals("Perro")) {
            sql = "SELECT tp.id id_pet, tp.name pet_name, tb.name pet_breed, tp.gender pet_gender, tpo.owner pet_owner, tb.pet_type FROM tb_pet tp INNER JOIN tb_pet_owners tpo ON tp.id_pet_owner = tpo.id INNER JOIN tb_breeds tb ON tp.id_pet_breed = tb.id WHERE tb.pet_type = 'Perro' ORDER BY tp.id";
        } else {
            sql = "SELECT tp.id id_pet, tp.name pet_name, tb.name pet_breed, tp.gender pet_gender, tpo.owner pet_owner, tb.pet_type FROM tb_pet tp INNER JOIN tb_pet_owners tpo ON tp.id_pet_owner = tpo.id INNER JOIN tb_breeds tb ON tp.id_pet_breed = tb.id WHERE tb.pet_type = 'Gato' ORDER BY tp.id";
        }

        try {
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            Object[] pets = new Object[5];
            modelo = (DefaultTableModel) jtb_pets.getModel();

            while (modelo.getRowCount() > 0) {
                /* Clear rows when the table change */
                modelo.removeRow(0);
            }

            while (rs.next()) {
                pets[0] = rs.getInt("id_pet");
                pets[1] = rs.getString("pet_name");
                pets[2] = rs.getString("pet_breed");
                pets[3] = rs.getString("pet_owner");
                pets[4] = rs.getString("pet_gender");
                modelo.addRow(pets);
                System.out.println(rs.getInt("id_pet"));
            }
            jtb_pets.setModel(modelo);
        } catch (SQLException e) {
            System.out.println("Error de conexión");
        }

    }

    void add_pet() {

        String filter_pet = cb_petType.getSelectedItem().toString();
        int breedId = 0;
        if (filter_pet.equals("Perro")) {
            breedId = cb_breed.getSelectedIndex() + 1;
        } else {
            breedId = cb_breed.getSelectedIndex() + 1;
        }

        String gender = "";
        String name = txt_petName.getText();

        int ownerId = cb_petOwner.getSelectedIndex() + 1;

        if (jrb_hembra.isSelected()) {
            gender = "Hembra";
        } else {
            gender = "Macho";
        }

        String query = "INSERT INTO tb_pet(name, gender, id_pet_owner, id_pet_breed) VALUES('" + name + "', '" + gender + "', " + ownerId + ", " + breedId + ")";

        try {
            cn = con.getConnection();
            st = cn.createStatement();
            st.executeUpdate(query);
            System.out.println("Raza creada con éxito");
            JOptionPane.showMessageDialog(this, "La mascota ha sido creada con éxito");
            clear_rows_table();
            show_pets();
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "No se pudo crear la mascota");
        }

    }

    /* guide code */
//        String filter_pet = cb_petType.getSelectedItem().toString();
//        String sql = "";
//        if (filter_pet.equals("Perro")) {
//            sql = "SELECT tp.id id_pet, tp.name pet_name, tb.name pet_breed, tp.gender pet_gender, tpo.owner pet_owner, tb.pet_type FROM tb_pet tp INNER JOIN tb_pet_owners tpo ON tp.id_pet_owner = tpo.id INNER JOIN tb_breeds tb ON tp.id_pet_breed = tb.id WHERE tb.pet_type = 'Perro' ORDER BY tp.id";
//        } else {
//            sql = "SELECT tp.id id_pet, tp.name pet_name, tb.name pet_breed, tp.gender pet_gender, tpo.owner pet_owner, tb.pet_type FROM tb_pet tp INNER JOIN tb_pet_owners tpo ON tp.id_pet_owner = tpo.id INNER JOIN tb_breeds tb ON tp.id_pet_breed = tb.id WHERE tb.pet_type = 'Gato' ORDER BY tp.id";
//        }
//
//        String gender = "";
//        String name = txt_petName.getText();
//
//        int ownerId = cb_petOwner.getSelectedIndex() + 1;
//        int breedId = cb_breed.getSelectedIndex() + 1;
//
//        if (jrb_hembra.isSelected()) {
//            gender = "Hembra";
//        } else {
//            gender = "Macho";
//        }
//
//        if (name.isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Falta ingresar el nombre de la mascota");
//        } else {
//            String query = "INSERT INTO tb_pet(name, gender, id_pet_owner, id_pet_breed) VALUES('" + name + "', '" + gender + "'," + ownerId + ", " + breedId + ")";
//
//            try {
//                cn = con.getConnection();
//                st = cn.createStatement();
//                st.executeUpdate(query);
//                JOptionPane.showMessageDialog(this, "La mascota ha sido creada con éxito");
//                clear_rows_table();
//                show_pets();
//            } catch (HeadlessException | SQLException e) {
//                JOptionPane.showMessageDialog(this, "No se pudo crear la mascota");
//            }
//        }
//    }
//    void add_pet() {
//        String gender = "";
//        String name = txt_petName.getText();
//
//        int ownerId = cb_petOwner.getSelectedIndex()+1;
//        int breedId = cb_breed.getSelectedIndex()+1;
//        
//        if (jrb_hembra.isSelected()) {
//            gender = "Hembra";
//        } else {
//            gender = "Macho";
//        }
//        
//        if (name.isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Falta ingresar el nombre de la mascota");
//        } else {
//            String query = "INSERT INTO tb_pet(name, gender, id_pet_owner, id_pet_breed) VALUES('" + name + "', '" + gender + "'," + ownerId + ", " + breedId + ")";
//
//            try {
//                cn = con.getConnection();
//                st = cn.createStatement();
//                st.executeUpdate(query);
//                JOptionPane.showMessageDialog(this, "La mascota ha sido creada con éxito");
//                clear_rows_table();
//                show_pets();
//            } catch (HeadlessException | SQLException e) {
//                JOptionPane.showMessageDialog(this, "No se pudo crear la mascota");
//            }
//        }
//    }
    void edit_pet() {

        String filter_pet = cb_petType.getSelectedItem().toString();
        int breedId = 0;
        if (filter_pet.equals("Perro")) {
            breedId = cb_breed.getSelectedIndex() + 1;
        } else {
            breedId = cb_breed.getSelectedIndex() + 1;
        }
        
        
        int id = Integer.parseInt(txt_petId.getText());
        String name = txt_petName.getText();
//        String breed = cb_breed.getSelectedItem().toString();
        
        int ownerId = cb_petOwner.getSelectedIndex()+1;
//        int breedId = cb_breed.getSelectedIndex()+1;
        
        
        String gender = "";
        if (jrb_hembra.isSelected()) { 
            gender = "Hembra";
        }else {
            gender = "Macho";
        }
        
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Falta ingresar el nombre del dueño");
        } else {
            String query = "UPDATE tb_pet SET name = '" + name + "', gender= '" + gender + "', id_pet_owner = " + ownerId + ", id_pet_breed=" + breedId + " WHERE id = " + id;
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "La mascota ha sido modificado con éxito");
                clear_rows_table();
                show_pets();
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, "No se pudo modificar la información de la mascota");
            }
        }
    }

    void delete_pet() {
        int fila = jtb_pets.getSelectedRow();
        int id = Integer.parseInt(txt_petId.getText());
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "No has seleccionado una mascota");
        } else {

            System.out.println("ID: " + id);
            String query = "DELETE FROM tb_pet WHERE id = " + id;
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "La mascota ha sido eliminada con exito");
                clear_rows_table();
                show_pets();
            } catch (HeadlessException | SQLException e) {
            }
        }
    }

    void clear_rows_table() {
        for (int i = 0; i < jtb_pets.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
        txt_petName.setText("");
        txt_petId.setText("");
    }
    
    private void RefreshReportPetByGender() {
        
        LinkedList<ReportPetByGender> report = controller.ListPetByGender();
        DefaultPieDataset dataset = new DefaultPieDataset();
        for (ReportPetByGender record : report) {
            dataset.setValue(record.getPet_gender(), record.getAmount_pet_gender());
        }
        JFreeChart chart = ChartFactory.createPieChart("Mascotas por Género", dataset, true, true, true);
        ChartPanel panel = new ChartPanel(chart);
        panel.setMouseWheelEnabled(true);
//        jpanel_graph_left.setLayout(new java.awt.BorderLayout());
        panel.setVisible(true);
//        panel.setSize(400, 400);
        panel.setBounds(15, 15, 280, 280);
        jpanel_graph_left.add(panel);
/*        jpanel_graph_left.setSize(200, 200);
        jpanel_graph_left.setBounds(10, 10, 200, 200);
        jpanel_graph_left.add(panel, BorderLayout.CENTER);
        jpanel_graph_left.validate();*/
    }
    
    private void RefreshReportPetByBreed() {
        
        LinkedList<ReportPetByBreed> report = controller.ListPetByBreed();
        DefaultPieDataset dataset = new DefaultPieDataset();
        for (ReportPetByBreed record : report) {
            dataset.setValue(record.getPet_breed(), record.getAmount_pet_breed());
        }
        JFreeChart chart = ChartFactory.createPieChart("Mascotas por Raza", dataset, true, true, true);
        ChartPanel panel = new ChartPanel(chart);
        panel.setMouseWheelEnabled(true);
        panel.setVisible(true);
//        panel.setSize(250, 250);
        panel.setBounds(15, 15, 280, 280);
        jpanel_graph_right.add(panel);
//        jpanel_graph_right.setLayout(new java.awt.BorderLayout());
//        jpanel_graph_right.setSize(100, 100);
//        jpanel_graph_right.setBounds(100, 10, 200, 200);
//        jpanel_graph_right.add(panel, BorderLayout.CENTER);
//        jpanel_graph_right.validate();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addPet;
    private javax.swing.JButton btn_deletePet;
    private javax.swing.JButton btn_editPet;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JComboBox<Object> cb_breed;
    public javax.swing.JComboBox<Object> cb_petOwner;
    public javax.swing.JComboBox<String> cb_petType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpanel_graph_left;
    private javax.swing.JPanel jpanel_graph_right;
    private javax.swing.JRadioButton jrb_hembra;
    private javax.swing.JRadioButton jrb_macho;
    private javax.swing.JTable jtb_pets;
    private javax.swing.JTextField txt_petId;
    private javax.swing.JTextField txt_petName;
    // End of variables declaration//GEN-END:variables
}
